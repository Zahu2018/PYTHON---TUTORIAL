
LIST (#list, #lista) list = [item]
    list.append(item) => list; add item or seq at the end of list
    list.extend(alta_lista) => list; extend add a list to another; list1+list2
    list.insert(pozitie, item) => list; insert item at position
    list.remove(item) => delete first item find in list
    list.pop() => sterge ultimul item din lista
    list.pop(obj) = list[-1]) => sterge ultimul named item din lista
    list.pop(pozitie) => delete item at position
    list.clear() => list; delete all item from list; list exist but is empty
    list.index(item) => int; return position of first found item; Ex: (a=list.index(item))
    list.count(item) => int; return how many times an item is found in list
    list.sort() => sort items ascending;
    list.sort(key=None sau len, reverse=False) => key=str.lower; reverse=True/False; if assing len to key then sort a list of words according to their lenght Ex:words=['girl','python','tutorial','boy','snake'] > words.sort(key=len) => ['boy', 'girl', 'snake', 'python', 'tutorial']
    list.reverse() => list; invert items in a list; first item became last one
    list.copy() => list; echivalent pt list.copy() <=> new_list[:]=old_list;
    - - - - - - - - - - - - - - - - - - - - - - - - - - -
    FUNCTII = list, list(dict.keys()), list[index]=arg (update item),
              del, len, max, min, sum, sorted
    SLICE   = list[a[,:z]]


 P y t h o n
 0 1 2 3 4 5
-6-5-4-3-2-1


del list[]      # sterge itemii dintr-o lista; daca sunt param, conform param (ex: [2: 4])
len(list)       # cate elemente are lista (lungimea listei)
max(list)
min(list)
sorted(list)    #sorteaza crescator o lista de acelasi tip, doar numere, doar cuvinte
sum(list)       # suma elementelor din lista

list(secventa)      #transforma o seq (sir, dictionar, etc) in lista
list(dict.keys())   #creaza o lista cu keile din dict
list[a[,:z]]        #acceseaza un element la indexul a, sau mai multe de la a-z
list[index]=arg     #update un item din lista la indexul dat, cu noul argument (arg)
*, +, in            #repetition, concatenation, membership, (iteration se face cu for)

Basic operation on list
+---------------+------------------------------------+-----------------------+
| Operation     | Example                            |    Results            |
+---------------+------------------------------------+-----------------------+
| Length        | len([1, 2, 3])                     | 3                     |
| Concatenation | [1, 2, 3] + [4, 5, 6]              | [1, 2, 3, 4, 5, 6]    |
| Repetition    | ['Hi!'] * 3                        | ['Hi!', 'Hi!', 'Hi!'] |
| Membership    | 3 in [1, 2, 3]                     | TRUE                  |
| Iteration     | for x in [1,2,3]:print (x,end=' ') | 1 2 3                 |
+---------------+------------------------------------+-----------------------+

Index, slicing and matrix
+------------------------------------------------------------------+
| lista = [‘a’,’b’,’c’,’d’,’e’]                                    |
+-------------------+------------+---------------------------------+
| Python Expression |  Results   | Description                     |
| lista[2]          | c          | Offsets start at zero           |
| lista[-1]         | e          | Negative: count from the right  |
| lista[1:]         | b, c, d, e | Slicing fetches sections        |
+-------------------+------------+---------------------------------+


Accesing value - Slicing
+-------------------------------+
| lista = ['a','b','c','d','e'] |
+-------------------------------+
| lista[0]      => a            |
| lista[1:4]    => b, c, d      | # ultima exclusiv
+-------------------------------+


for index, item in enumerate(lista): # enumerate permite preluarea indexului si elementului
    print(index, item)  # Ex: 0, a; 1, b; ...

ADDING NEW VALUE
lista = ['a','b','c','d','e']

CREATE LIST
lista = list(range(1, 11, 2)) # si alte combinatii
string.split() # Ex: "pyton list tutorial".split()  =>['python','list','tutorial']

COMPREHENSION LIST
[expression for var in seq] # return a list of the expression values when each var in a seq is used in expression

[expression for var in seq if condition] # return a list of the expression values when each var in the seq that satisfies the condition is used in the expression
i = [random.randint(2, 10) for i in range(11)] =>[10, 3, 9, 6, ...]
i = [i for i in range(200, 210) if i%2 == 0] => [200, 202, 204, ...]

DELETE ITEM
lista = ['a','b','c','d','e']
del lista[3] :=> lista = ['a','b','c','e']

UPDATE - Replace
lista = ['a','b','c','d','e']
lista[2] = 'X'     => lista = ['a','b','X','d','e'] # update a value that exist
lista[1:3] = [1, 2]     => lista = ['a', 1, 2, 'd', 'e']

lista[0] = value      #update/schimba elementul de la pozitia 0

lista.append(element) # update a lista cu un nou element

LOOP
lista_intrebari = ['a', 'b', 'c']
lista_raspunsuri = [1, 2, 3]
for i, j in zip(lista_intrebari, lista_raspunsuri):
    print("Care este {0}? Este {1}".format(i, j))

for f in sorted(set(lista_1)):
    print(f)

